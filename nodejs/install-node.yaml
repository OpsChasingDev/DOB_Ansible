---
- name: install node and npm
  hosts: node_servers
  tasks:
    - name: Update apt repo and cache
      apt: update_cache=true force_apt_get=yes cache_valid_time=3600
    - name: Install nodejs and npm
      apt:
        update_cache: true
        pkg:
          - nodejs
          - npm

- name: create app user
  hosts: node_servers
  tasks:
    - name: create linux user
      user:
        name: appuser
        comment: Nodejs app user
        group: admin

- name: deploy nodejs app
  hosts: node_servers
  # these next two attributes enable this play to run as the user we specified instead of root
  become: True
  become_user: appuser
  tasks:
    - name: copy nodejs folder to server
      copy:
        src: /home/robert/git/simple-nodejs/nodejs-app-1.0.0.tgz
        dest: /home/appuser/app-1.0.0.tgz
    - name: unpack nodejs tar file
      unarchive:
        src: /home/appuser/app-1.0.0.tgz
        dest: /home/appuser/
        remote_src: yes
    - name: install dependencies
      npm:
        path: /home/appuser/package
    - name: start app
      # 'command' and 'shell' tasks are NOT STATEFUL
      command:
        chdir: /home/appuser/package/app
        cmd: node server
      # this attribute "async" prevents the node executable from blocking the playbook from completing
      async: 1000
      poll: 0
    - name: ensure app is running
      # 'shell' is different than 'command' because shell will operate in the shell and use things like pipeline and &&
      # 'command' is generally considered more secure, so that is the preference if it can work that way
      # 'register' is a module that captures the output of any task execution in the playbook (that's handy!)
      # info captured in 'register' can be output using the 'debug' task shown in the next task, calling var from jinja {{}}
      shell: ps aux | grep node
      register: app_status
    - debug: msg={{app_status}}